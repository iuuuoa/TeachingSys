are you Hi GongLei how 
am fine thank you and you I 
and you I am fine thank you 
am fine too nice to meet you I 
fine thank you and you I am 
fine too nice to meet you I am 
GongLei how are you Hi 
Hi GongLei how are you 
how are you Hi GongLei 
I am fine thank you and you 
I am fine too nice to meet you 
meet you I am fine too nice to 
meet you too Nice to 
nice to meet you I am fine too 
Nice to meet you too 
thank you and you I am fine 
too nice to meet you I am fine 
to meet you I am fine too nice 
to meet you too Nice 
too Nice to meet you 
you Hi GongLei how are 
you and you I am fine thank 
you I am fine thank you and 
you I am fine too nice to meet 
you too Nice to meet 
--------------事件系统-观察者模式文字说明--------------
观察者模式是对象的行为模式，又叫发布-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-监听器（Source/Listener）模式或从属者（Dependents）模式。

观察者模式一般是一种一对多的关系，可以有任意个（一个或多个）观察者对象同时监听某一个对象。监听的对象叫观察者（后面提到监听者，其实就指观察者，两者是等价的），被监听的对象叫被观察者（Observable，也叫主题 Subject）。被观察者对象在状态或内容发生变化时，会通知所有观察者对象，使它们能够做出相应的变化（如自动更新自己的信息）。

--------------关键代码--------------
public class Subject {

    //观察者数组
    private List<Observer> vector = new LinkedList<>();


    //增加一个观察者
    public void addObserver(Observer observer) {
        vector.add(observer);
    }

    //删除一个观察者
    public void deleteObserver(Observer observer) {
        vector.remove(observer);
    }

    //通知所有观察者
    public void notifyAllObserver() {
        for(Observer observer : vector) {
            observer.toDo();
        }
    }

    // 通知特定观察者
    public void notifyOneObserver(int i) {
        vector.get(i).toDo();
    }

}	

